using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
// 追加 s //
// 追加 e //

public class GameController : MonoBehaviour
{
    int dealersFirstCard = -1;

    public CardStack player;
    public CardStack dealer;
    public CardStack deck;
    // 追加 s //
    public CardStack community;
    // 追加 e //

    public Button hitButton;
    public Button stickButton;
    public Button playAgainButton;

    public Text winnerText;

    // 追加 s //
    private int[] playerHand;
    private int[] dealerHand;
    private int[] checkHand;
    // 追加 e //

    /*
     * Cards dealt to each player
     * First player hits/sticks/bust
     * Dealer`s turn; must have minmum of 17 score hand
     * Dealers cards;first card is hidden, subsequent cards are facing
     */

    #region Public methods

    public void Hit()
    {
        player.Push(deck.Pop());
        if (player.HandValue() > 21)
        {
            // TODO: The player is bust
            hitButton.interactable = false;
            stickButton.interactable = false;
            StartCoroutine(DealersTurn());
        }
    }

    public void Stick()
    {
        hitButton.interactable = false;
        stickButton.interactable = false;

        // TODO: Dealer
        StartCoroutine(DealersTurn());
    }

    public void PlayAgain()
    {
        playAgainButton.interactable = false;

        player.GetComponent<CardStackView>().Clear();
        dealer.GetComponent<CardStackView>().Clear();
        deck.GetComponent<CardStackView>().Clear();
        deck.CreateDeck();

        winnerText.text = "";

        hitButton.interactable = true;
        stickButton.interactable = true;

        dealersFirstCard = -1;

        StartGame();
    }

    #endregion

    #region Unity messages

    private void Start()
    {
        StartGame();
    }

    #endregion

    // ゲーム開始時に、プレイヤーとディーラーにカードを２枚配る
    void StartGame()
    {
        for (int i = 0; i < 2; i++)
        {
            player.Push(deck.Pop());
            // 追加 s //
            //HitDealer();
            dealer.Push(deck.Pop());
            // 追加 e //
        }
        // 追加 s //
        // フロップを表示できるかの確認
        for(int j = 0; j < 3; j++)
        {
            community.Push(deck.Pop());
        }
        CommunityStack();
        CheckHandValue(5);
        // 追加 e //
    }

    // 追加 s //
    // コミュニティのカードを合わせる
    void CommunityStack()
    {
        playerHand = new int[5];
        dealerHand = new int[5];
        int i = 0;
        foreach (int card in player.GetCards())
        {
            playerHand[i] = card;
            i++;
        }
        foreach (int card in community.GetCards())
        {
            playerHand[i] = card;
            i++;
        }
        int j = 0;
        foreach (int card in dealer.GetCards())
        {
            dealerHand[j] = card;
            j++;
        }
        foreach (int card in community.GetCards())
        {
            dealerHand[j] = card;
            j++;
        }
    }

    void CheckHandValue(int a)
    {
        int[] Number = new int[a]; // 手札の数字
        int[] Suite = new int[a]; // 手札の柄
        int[] pair = new int[13]; // {No2,3,4,5,6,7,8,9,10,11,12,13,1}
        //int fourcard = 0;
        //int threecard = 0;
        //int onepair = 0;
        //int highcard = 0;
        int rankPoint;
        // 同じ数字のカードが何枚あるかカウント
        for (int i = 0; i < a; i++)
        {
            Suite[i] = playerHand[i] / 13;
            Number[i] = playerHand[i] % 13;
            //switch (Number[i])
            //{
            //    case 0:
            //        pair[0]++; // No2
            //        break;
            //    case 1:
            //        pair[1]++; // No3
            //        break;
            //    case 2:
            //        pair[2]++; // No4
            //        break;
            //    case 3:
            //        pair[3]++; // No5
            //        break;
            //    case 4:
            //        pair[4]++; // No6
            //        break;
            //    case 5:
            //        pair[5]++; // No7
            //        break;
            //    case 6:
            //        pair[6]++; // No8
            //        break;
            //    case 7:
            //        pair[7]++; // No9
            //        break;
            //    case 8:
            //        pair[8]++; // No10
            //        break;
            //    case 9:
            //        pair[9]++; // No11
            //        break;
            //    case 10:
            //        pair[10]++; // No12
            //        break;
            //    case 11:
            //        pair[11]++; // No13
            //        break;
            //    case 12:
            //        pair[12]++; // No1
            //        break;
            //}
            Number[i] = Number[i] + 2; // Aは14
        }
        var list = new List<int>();
        list.AddRange(Number); // Numberの要素を入れたlistを作成
        list.Sort(); // 小さい順に並べる
        list.Reverse(); // 逆転して大きい順にする
        HashSet<int> pairChecker = new HashSet<int>() { Number[0], Number[1], Number[2], Number[3], Number[4] };

        if (a == 5)
        {
            // フラッシュ系の場合
            if (Suite[0] == Suite[1] && Suite[1] == Suite[2] && Suite[2] == Suite[3] && Suite[3] == Suite[4])
            {
                int temp = 10;

                // 弱いストレートフラッシュの場合
                if (list[0] == 14 && list[1] == 5 && list[2] == 4 && list[3] == 3 && list[4] == 2)
                {
                    // rankPoint = list[0]*10^4
                    temp = temp * 10;
                    rankPoint = temp * list[0] * 1000;
                }
                // 強いストレートフラッシュの場合
                else if ((list[0] + list[1] + list[2] + list[3] + list[4]) / 5 == list[2] && list[2] - 2 == list[4] && list[2] + 2 == list[0])
                {
                    // rankPoint = list[0]*10^5
                    temp = temp * 100;
                    rankPoint = temp * list[0] * 10000;
                }
                // フラッシュの場合
                else
                {
                    // rankPoint = list[0]*10
                    rankPoint = temp * list[0];
                }
            }
            // フラッシュ以外
            else if (pairChecker.Count < 5)
            {
                // ペアの数をカウント
                //for (int j = 0; j < 13; j++)
                //{
                //    switch (pair[j])
                //    {
                //        case 4:
                //            fourcard++;
                //            break;
                //        case 3:
                //            threecard++;
                //            break;
                //        case 2:
                //            onepair++;
                //            break;
                //        case 1:
                //            highcard++;
                //            break;
                //    }
                //}
                int x;
                int y;
                int doubling = 0;
                for (x = 0; x < list.Count; x++)
                {
                    for (y = x + 1; y < list.Count; y++)
                    {
                        if (list[x] == list[y])
                        {
                            doubling++;
                        }
                    }
                }
                if (doubling == 6)
                {
                    for (int k = 0; k < a; k++)
                    {
                        if (list[k] == list[k + 1])
                        {
                            // rankPoint = list[k]*10^3
                            rankPoint = list[k] * 1000;
                            break;
                        }
                    }
                    Debug.Log("Hand is Fourcard");
                }
                else if (doubling == 4)
                {
                    int temp = 0;
                    int temp2 = 0;
                    for (int k = 0; k < a; k++)
                    {
                        // rankPoint = list[k]*10^2
                        if (list[k] == list[k + 1] && list[k + 1] == list[k + 2])
                        {
                            temp = list[k] * 100;
                        }
                        else
                        {
                            temp2 = list[k] * 10;
                        }
                    }
                    rankPoint = temp + temp2;
                    Debug.Log("Hand is full house");
                }
                else if (doubling == 3)
                {
                    int temp = 0;
                    int temp2 = 0;
                    for (int k = 0; k < a; k++)
                    {
                        if (list[k] == list[k + 1] && list[k + 1] == list[k + 2])
                        {
                            temp = list[k] * (-100);
                            break;
                        }
                    }
                    if (list[0] != list[1]) // example 9 8 8 8 7
                    {
                        temp2 = list[0] * (-10);
                    }
                    else if (list[1] != list[2]) // example 9 8 7 7 7
                    {
                        temp2 = list[1] * (-10);
                    }
                    else if (list[2] != list[3]) // example 8 8 8 7 6
                    {
                        temp2 = list[3] * (-10);
                    }
                    rankPoint = temp + temp2;
                    Debug.Log("Hand is threecard");
                }
                else if (doubling == 2)
                {
                    int m;
                    int pairIndexA = 0;
                    int pairNumA;
                    for (m = 0; m < 4; m++)
                    {
                        if (list[m] == list[m + 1]) // 連番で一致する場所を確認する
                        {
                            break;
                        }
                        pairIndexA++; // 一個目の大きいペアが存在するインデックスの開始位置
                    }
                    pairNumA = list[pairIndexA]; //ペアのナンバー
                    list.RemoveAll(p => p == pairNumA);//ナンバーと一致している数を取り除く

                    int n;
                    int pairIndexB = 0;
                    int pairNumB;
                    for (n = 0; n < 2; n++)
                    {
                        if (list[n] == list[n + 1]) // 残りの3つの数から連番で一致する場所を確認する
                        {
                            break;
                        }
                        pairIndexB++; // 二個目の小さいペアが存在するインデックスの開始位置
                    }
                    pairNumB = list[pairIndexB]; //ペアのナンバー
                    list.RemoveAll(p => p == list[pairIndexB]);//ナンバーと一致している数を取り除く

                    rankPoint = (pairNumA * (-1000)) + (pairNumB * (-100));
                    Debug.Log("Hand is twopairs");
                }
                else if (doubling == 1)
                {
                    int m;
                    int pairIndexA = 0;
                    int pairNumA;
                    for (m = 0; m < 4; m++)
                    {
                        if (list[m] == list[m + 1]) // 連番で一致する場所を確認する
                        {
                            break;
                        }
                        pairIndexA++; // 一個目の大きいペアが存在するインデックスの開始位置
                    }
                    pairNumA = list[pairIndexA]; //ペアのナンバー
                    list.RemoveAll(p => p == pairNumA);//ナンバーと一致している数を取り除く

                    int temp = 0;
                    for (int n = 0; n < a - 2; n++)
                    {
                        temp = temp + list[n];
                    }
                    rankPoint = (pairNumA * (-10000)) + temp * (-1000);
                    Debug.Log("Hand is onepair");
                }
            }
            else
            {
                int temp = 0;
                for (int k = 0; k < a; k++)
                {
                    temp = temp + list[k];
                }
                rankPoint = temp * (-100000);
                Debug.Log("Hand is highcard");
            }
            Debug.Log("end");
                //if (fourcard == 1)
                //{
                //    for(int k = 0; k < a; k++)
                //    {
                //        if (list[k] == list[k + 1])
                //        {
                //            rankPoint = list[k] * (10 ^ 8);
                //            break;
                //        }
                //    }
                //    Debug.Log("Hand is Fourcard");
                //}
                //else if (threecard == 2 || (threecard >= 1 && onepair >= 1))
                //{
                //    int temp = 0;
                //    int temp2 = 0;
                //    for (int k = 0; k < a; k++)
                //    {
                //        if(list[k] == list[k+1] && list[k+1] == list[k + 2])
                //        {
                //            temp = list[k] * (10 ^ 7);
                //        }
                //        else
                //        {
                //            temp2 = list[k] * (10 ^ 6);
                //        }
                //    }
                //    rankPoint = temp + temp2;
                //    Debug.Log("Hand is full house");
                //}
                //else if (threecard == 1 && onepair == 0)
                //{
                //    int temp = 0;
                //    int temp2 = 0;
                //    for (int k = 0; k < a; k++)
                //    {
                //        if (list[k] == list[k + 1] && list[k + 1] == list[k + 2])
                //        {
                //            temp = list[k] * (10 ^ 4);
                //            break;
                //        }
                //    }
                //    if (list[0] != list[1]) // example 9 8 8 8 7
                //    {
                //        temp2 = list[0] * (10 ^ 3);
                //    }
                //    else if (list[1] != list[2]) // example 9 8 7 7 7
                //    {
                //        temp2 = list[1] * (10 ^ 3);
                //    }
                //    else if (list[2] != list[3]) // example 8 8 8 7 6
                //    {
                //        temp2 = list[3] * (10 ^ 3);
                //    }
                //    rankPoint = temp + temp2;
                //    Debug.Log("Hand is threecard");
                //}
                //else if (threecard == 0 && onepair > 1)
                //{
                //    Debug.Log("Hand is twopairs");
                //}
                //else if (threecard == 0 && onepair == 1)
                //{
                //    Debug.Log("Hand is onepair");
                //}
                //else
                //{
                //    int temp = 0;
                //    for(int k = 0; k < a; k++)
                //    {
                //        temp = temp + list[k];
                //    }
                //    rankPoint = temp;
                //    Debug.Log("Hand is highcard");
                //}
        }
    }
            
        // 追加 e //

        void HitDealer()
    {
        int card = deck.Pop();

        if (dealersFirstCard < 0)
        {
            dealersFirstCard = card;
        }

        dealer.Push(card);
        if (dealer.CardCount >= 2)
        {
            CardStackView view = dealer.GetComponent<CardStackView>();
            // ディーラーのカードを１枚表にする
            view.Toggle(card, true);
        }
    }

    // プレイヤーのターンが終わり、ディーラーがカードの合計が17以上になるまでカードを引く
    IEnumerator DealersTurn()
    {
        hitButton.interactable = false;
        stickButton.interactable = false;

        CardStackView view = dealer.GetComponent<CardStackView>();
        view.Toggle(dealersFirstCard, true);
        view.ShowCards();
        yield return new WaitForSeconds(1f);

        while (dealer.HandValue() < 17)
        {
            HitDealer();
            yield return new WaitForSeconds(1f);
        }

        // プレイヤーがバースト または ディーラーが勝利
        if (player.HandValue() > 21 || dealer.HandValue() >= player.HandValue() && dealer.HandValue() <= 21)
        {
            winnerText.text = "Sorry-- you lose";
        }
        // ディーラーがバースト または プレイヤーの勝利
        else if(dealer.HandValue() > 21 || player.HandValue() <= 21 && player.HandValue() > dealer.HandValue())
        {
            winnerText.text = "Winner, winner! Chicken dinner";
        }
        // 引き分け
        else
        {
            winnerText.text = "The house wins!";
        }

        yield return new WaitForSeconds(1f);
        playAgainButton.interactable = true;
    }
}